bundle agent deploy {
    vars:
    <#list agent.modVars as key, value>
        "${key}" string => "${value}";
    </#list>

    ################################ DO NOT MODIFY ################################

        <#list agent.envVars as key, value>
        "${key}" string => "<#list value as element>${element}
                            </#list>";
        </#list>
        "ips" slist => { @(sys.ip_addresses)};

  classes:
  <#list agent.classes as key, value>
     "${key}"
        expression => expression => strcmp("$(ips)","${value}");
  </#list>
    "exists" expression => fileexists("$(deployment_path)");

  methods:
    <#list agent.methods as key, value>
       ${key}.!exists::
       <#list value as element>
          "any" usebundle => ${element};
       </#list>
    </#list>

  reports:
    !host1.!host2::
      "Host undefined.";
    !exists::
      "Deploy done.";
    exists::
      "Delete $(deploy_path) dir to deploy again.";
}

body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }

bundle agent copy_files(master_path, host_path) {

  vars:
    "remote_server" string => "$(sys.policy_hub)";

  files:
    "$(host_path)"
      comment => "Pull down latest files",
      perms => m("455"),
      copy_from => remote_cp("$(master_path)","$(remote_server)"),
      depth_search => recurse("inf"),
      action => immediate,
      create  => "true";

  reports:
    "File copied";
}

bundle agent execute_script(path, report, env) {

  commands:
    "/usr/bin/env $(env) /bin/bash $(path)"
      contain => not_paranoid;

  reports:
    "$(report) done";
}

body contain not_paranoid {
  umask => "22";
  exec_owner => "root";
  chdir => "/deploy";
}
