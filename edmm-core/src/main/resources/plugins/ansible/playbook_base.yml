---
<#list hosts as key,value>
# Add host for '${value.name}'
- hosts: localhost
  gather_facts: no
  tasks:
    - include_vars:
        file: ${value.name}_props.json
        name: props
    - name: Add host
      add_host:
        name: ${value.name}
        ansible_host: "{{ props.PUBLIC_ADDRESS }}"
        ansible_user: ubuntu
        ansible_ssh_extra_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
        ansible_ssh_private_key_file: ${value.privateKeyFile}
        ansible_python_interpreter: /usr/bin/python3
    - name: Wait for target connection to become available
      wait_for:
        host: "{{ props.PUBLIC_ADDRESS }}"
        port: 22
</#list>
---
<#list hosts as key,value>
- name: populate environment for ${value.name}
  hosts: ${value.name}
  become: yes
  become_user: root
  tasks:
    - include_vars:
        file: ${value.name}_props.json
        name: props
    - name: populate /etc/environment
      lineinfile:
        path: "/etc/environment"
        state: present
        regexp: "^{{ item.key }}="
        line: "{{ item.key }}={{ item.value}}"
      with_items: "{{ props.env }}"
</#list>
---
<#list plays as play>
# Play for '${play.name}'
- name: ${play.name}
  <#if play.hosts??>
  hosts: ${play.hosts}
  <#else>
  </#if>
  become: yes
  become_user: root
  <#if play.vars?? && play.vars?size != 0>
  environment:
    <#list play.vars?keys as key>
    ${key}: ${play.vars[key]}
    </#list>
  <#else>
  </#if>
  tasks:
    <#list play.files as file>
    - name: create destination directory
      file:
        path: "{{ '${file.target}' | dirname }}"
        state: directory
    - name: copy file
      copy:
        src: ${file.src}
        dest: ${file.target}
    </#list>
    <#list play.tasks as task>
    - name: ${task.name}
      script: ${task.script}
      <#if task.args?? && task.args?size != 0>
      args:
      <#list task.args as arg_key,arg_value>
        ${arg_key}: ${arg_value}
      </#list>
      <#else>
      </#if>
      register: result
      <#if play.runtimeVars?? && play.runtimeVars?size != 0>
      environment:
        <#list play.runtimeVars as var>
        ${var}: "{{ props.${var} }}"
        </#list>
      <#else>
      </#if>
    - debug: msg="{{ result.stdout }}"
    </#list>
</#list>
